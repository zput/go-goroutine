<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>鲁棒和性能 on go调度源码分析</title><link>https://zput.github.io/go-goroutine/docs/robustness_and_performance/</link><description>Recent content in 鲁棒和性能 on go调度源码分析</description><generator>Hugo</generator><language>zh</language><atom:link href="https://zput.github.io/go-goroutine/docs/robustness_and_performance/index.xml" rel="self" type="application/rss+xml"/><item><title>测试相关函数</title><link>https://zput.github.io/go-goroutine/docs/robustness_and_performance/golang_test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zput.github.io/go-goroutine/docs/robustness_and_performance/golang_test/</guid><description>&lt;h1 id="golang测试相关函数">
 golang测试相关函数
 &lt;a class="anchor" href="#golang%e6%b5%8b%e8%af%95%e7%9b%b8%e5%85%b3%e5%87%bd%e6%95%b0">#&lt;/a>
&lt;/h1>
&lt;h2 id="test函数的种类">
 test函数的种类
 &lt;a class="anchor" href="#test%e5%87%bd%e6%95%b0%e7%9a%84%e7%a7%8d%e7%b1%bb">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>func TestXxx(t *testing.T) { ... }&lt;/code>
&lt;ul>
&lt;li>注意下这个Xxx需要大写&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>func BenchmarkXxx(b *testing.B) { ... }&lt;/code>
&lt;ul>
&lt;li>注意下这个Xxx需要大写&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ExampleXxx&lt;/code>
&lt;ul>
&lt;li>&lt;code>prints output to os.Stdout&lt;/code>&lt;/li>
&lt;li>&amp;ldquo;Output:&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Unordered output:&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>go help testfunc&lt;/code>&lt;/p>

&lt;div class="book-expand">
 &lt;label>
 &lt;div class="book-expand-head flex justify-between">
 &lt;span>Expand&lt;/span>
 &lt;span>↕&lt;/span>
 &lt;/div>
 &lt;input type="checkbox" class="hidden" />
 &lt;div class="book-expand-content markdown-inner">
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>The &lt;span style="color:#e6db74">&amp;#39;go test&amp;#39;&lt;/span> command expects to find test, benchmark, and example functions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>in the &lt;span style="color:#e6db74">&amp;#34;*_test.go&amp;#34;&lt;/span> files corresponding to the package under test.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A test &lt;span style="color:#66d9ef">function&lt;/span> is one named TestXxx &lt;span style="color:#f92672">(&lt;/span>where Xxx does not start with a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lower &lt;span style="color:#66d9ef">case&lt;/span> letter&lt;span style="color:#f92672">)&lt;/span> and should have the signature,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func TestXxx&lt;span style="color:#f92672">(&lt;/span>t *testing.T&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> ... &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A benchmark &lt;span style="color:#66d9ef">function&lt;/span> is one named BenchmarkXxx and should have the signature,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func BenchmarkXxx&lt;span style="color:#f92672">(&lt;/span>b *testing.B&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> ... &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>An example &lt;span style="color:#66d9ef">function&lt;/span> is similar to a test &lt;span style="color:#66d9ef">function&lt;/span> but, instead of using
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*testing.T to report success or failure, prints output to os.Stdout.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>If the last comment in the &lt;span style="color:#66d9ef">function&lt;/span> starts with &lt;span style="color:#e6db74">&amp;#34;Output:&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> the output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is compared exactly against the comment &lt;span style="color:#f92672">(&lt;/span>see examples below&lt;span style="color:#f92672">)&lt;/span>. If the last
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>comment begins with &lt;span style="color:#e6db74">&amp;#34;Unordered output:&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> the output is compared to the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>comment, however the order of the lines is ignored. An example with no such
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>comment is compiled but not executed. An example with no text after
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;Output:&amp;#34;&lt;/span> is compiled, executed, and expected to produce no output.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Godoc displays the body of ExampleXxx to demonstrate the use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>of the &lt;span style="color:#66d9ef">function&lt;/span>, constant, or variable Xxx. An example of a method M with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>receiver type T or *T is named ExampleT_M. There may be multiple examples
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> a given &lt;span style="color:#66d9ef">function&lt;/span>, constant, or variable, distinguished by a trailing _xxx,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>where xxx is a suffix not beginning with an upper &lt;span style="color:#66d9ef">case&lt;/span> letter.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Here is an example of an example:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func ExamplePrintln&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Println&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;The output of\nthis example.&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Output: The output of
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // this example.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Here is another example where the ordering of the output is ignored:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func ExamplePerm&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _, value :&lt;span style="color:#f92672">=&lt;/span> range Perm&lt;span style="color:#f92672">(&lt;/span>4&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.Println&lt;span style="color:#f92672">(&lt;/span>value&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Unordered output: &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The entire test file is presented as the example when it contains a single
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example &lt;span style="color:#66d9ef">function&lt;/span>, at least one other &lt;span style="color:#66d9ef">function&lt;/span>, type, variable, or constant
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>declaration, and no test or benchmark functions.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>See the documentation of the testing package &lt;span style="color:#66d9ef">for&lt;/span> more information.
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item></channel></rss>