<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>调度 on go调度源码分析</title><link>https://zput.github.io/go-goroutine/docs/runtime/schedule/</link><description>Recent content in 调度 on go调度源码分析</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Mon, 10 Feb 2020 10:09:00 +0000</lastBuildDate><atom:link href="https://zput.github.io/go-goroutine/docs/runtime/schedule/index.xml" rel="self" type="application/rss+xml"/><item><title>初始化</title><link>https://zput.github.io/go-goroutine/docs/runtime/schedule/2_init_before_enter_main_function/</link><pubDate>Mon, 20 Jan 2020 10:03:00 +0000</pubDate><guid>https://zput.github.io/go-goroutine/docs/runtime/schedule/2_init_before_enter_main_function/</guid><description>&lt;h1 id="进入main函数前的初始化">
 进入main函数前的初始化
 &lt;a class="anchor" href="#%e8%bf%9b%e5%85%a5main%e5%87%bd%e6%95%b0%e5%89%8d%e7%9a%84%e5%88%9d%e5%a7%8b%e5%8c%96">#&lt;/a>
&lt;/h1>
&lt;p>我们首先来gdb调试一下这个程序&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// main.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// the function&amp;#39;s body is empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gg&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">gg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// add_amd.s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">TEXT&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">·&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">SB&lt;/span>),&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>(&lt;span style="color:#a6e22e">FP&lt;/span>), &lt;span style="color:#a6e22e">BX&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>(&lt;span style="color:#a6e22e">FP&lt;/span>), &lt;span style="color:#a6e22e">BP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">ADDQ&lt;/span> &lt;span style="color:#a6e22e">BP&lt;/span>, &lt;span style="color:#a6e22e">BX&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#a6e22e">BX&lt;/span>, &lt;span style="color:#a6e22e">ret&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>(&lt;span style="color:#a6e22e">FP&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">RET&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译一下源代码: &lt;code>go build -gcflags &amp;quot;-N -l&amp;quot; -o test .&lt;/code>.&lt;/p>
&lt;h2 id="程序加载到内存入口">
 程序加载到内存入口
 &lt;a class="anchor" href="#%e7%a8%8b%e5%ba%8f%e5%8a%a0%e8%bd%bd%e5%88%b0%e5%86%85%e5%ad%98%e5%85%a5%e5%8f%a3">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://raw.githubusercontent.com/zput/myPicLib/master/zput.github.io/20220622230646.png" alt="20220622230646" />&lt;/p>

&lt;div class="book-expand">
 &lt;label>
 &lt;div class="book-expand-head flex justify-between">
 &lt;span>Expand&lt;/span>
 &lt;span>↕&lt;/span>
 &lt;/div>
 &lt;input type="checkbox" class="hidden" />
 &lt;div class="book-expand-content markdown-inner">
 &lt;pre tabindex="0">&lt;code>(gdb) info files
Symbols from &amp;#34;/tmp/kubernets/test&amp;#34;.
Local exec file:
	`/tmp/kubernets/test&amp;#39;, file type elf64-x86-64.
	Entry point: 0x454e00
	0x0000000000401000 - 0x000000000048cfd3 is .text
	0x000000000048d000 - 0x00000000004dc550 is .rodata
	0x00000000004dc720 - 0x00000000004dd38c is .typelink
	0x00000000004dd390 - 0x00000000004dd3e0 is .itablink
	0x00000000004dd3e0 - 0x00000000004dd3e0 is .gosymtab
	0x00000000004dd3e0 - 0x0000000000548adf is .gopclntab
	0x0000000000549000 - 0x0000000000549020 is .go.buildinfo
	0x0000000000549020 - 0x0000000000556118 is .noptrdata
	0x0000000000556120 - 0x000000000055d110 is .data
	0x000000000055d120 - 0x0000000000578990 is .bss
	0x00000000005789a0 - 0x000000000057b108 is .noptrbss
	0x0000000000400f9c - 0x0000000000401000 is .note.go.buildid
(gdb) b *0x454e00
Breakpoint 1 at 0x454e00: file /usr/lib/golang/src/runtime/rt0_linux_amd64.s, line 8. //跳到这个文件来了
(gdb) run
Starting program: /tmp/kubernets/test

Breakpoint 1, _rt0_amd64_linux () at /usr/lib/golang/src/runtime/rt0_linux_amd64.s:8 //跳到这个文件来了
8		JMP	_rt0_amd64(SB)

(gdb) info registers bp sp
bp 0x0	0
sp 0x7fffffffe4d0	0x7fffffffe4d0

(gdb) next
16		LEAQ	8(SP), SI	// argv
(gdb) list
11	// internal linking. This is the entry point for the program from the
12	// kernel for an ordinary -buildmode=exe program. The stack holds the
13	// number of arguments and the C-style argv.
14	TEXT _rt0_amd64(SB),NOSPLIT,$-8
15		MOVQ	0(SP), DI	// argc
16		LEAQ	8(SP), SI	// argv
17		JMP	runtime·rt0_go(SB)
(gdb) next
runtime.rt0_go () at /usr/lib/golang/src/runtime/asm_amd64.s:89 //跳到这个文件来了
89		MOVQ	DI, AX		// argc
(gdb) list
84	DATA _rt0_amd64_lib_argv&amp;lt;&amp;gt;(SB)/8, $0
85	GLOBL _rt0_amd64_lib_argv&amp;lt;&amp;gt;(SB),NOPTR, $8
86
87	TEXT runtime·rt0_go(SB),NOSPLIT,$0
88		// copy arguments forward on an even stack
89		MOVQ	DI, AX		// argc
90		MOVQ	SI, BX		// argv
91		SUBQ	$(4*8+7), SP		// 2args 2auto
92		ANDQ	$~15, SP
93		MOVQ	AX, 16(SP)
&lt;/code>&lt;/pre>
 &lt;/div>
 &lt;/label>
&lt;/div>

&lt;p>从上面的调试来看,最终到到达了&lt;code>src/runtime/asm_amd64.s:89&lt;/code>的
 &lt;a href="https://github.com/golang/go/blob/93810ac1f4574e1e2a79ea156781bafaf8b8ebe0/src/runtime/asm_amd64.s#L87">runtime.rt0_go&lt;/a>函数.&lt;/p></description></item><item><title>退出</title><link>https://zput.github.io/go-goroutine/docs/runtime/schedule/3_exit_goroutine/</link><pubDate>Mon, 10 Feb 2020 10:09:00 +0000</pubDate><guid>https://zput.github.io/go-goroutine/docs/runtime/schedule/3_exit_goroutine/</guid><description>&lt;h1 id="goroutine退出过程">
 goroutine退出过程
 &lt;a class="anchor" href="#goroutine%e9%80%80%e5%87%ba%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h1>
&lt;p>goroutine退出,即执行完callee代码后，返回到caller中去，前面一节我们看到，编译器自己把&lt;code>goexit()&lt;/code>的地址设置为了caller的pc保存到栈上方,所以退出后，会执行&lt;code>goexit()&lt;/code>函数,但是main goroutine比较特殊，这个groutine运行的代码
 &lt;a href="https://github.com/golang/go/blob/release-branch.go1.15/src/runtime/proc.go#L114">main函数&lt;/a>直接调用了操作系统exit()这个API退出,没有机会返回到caller层.&lt;/p>
&lt;h2 id="main-goroutine的退出">
 main goroutine的退出
 &lt;a class="anchor" href="#main-goroutine%e7%9a%84%e9%80%80%e5%87%ba">#&lt;/a>
&lt;/h2>
&lt;p>在上节中我们看到程序执行到了
 &lt;a href="https://github.com/golang/go/blob/release-branch.go1.15/src/runtime/proc.go#L114">mian函数&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The main goroutine.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getg&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//main包 init函数，递归的调用import包中定义的init函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">main_init&lt;/span> &lt;span style="color:#75715e">// make an indirect call, as the linker doesn&amp;#39;t know the address of the main package when laying down the runtime
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//调用main.main函数(用户定义的main函数):进行间接调用是因为链接器在放置运行时不知道主包的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span> = &lt;span style="color:#a6e22e">main_main&lt;/span> &lt;span style="color:#75715e">// make an indirect call, as the linker doesn&amp;#39;t know the address of the main package when laying down the runtime
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//系统API:exit函数,退出进程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">// 无效指针代码，会导致程序退出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>exit(0)&lt;/code>函数与最底部的&lt;code>for&lt;/code>循环会让程序不可能回到caller层&lt;/li>
&lt;/ul>
&lt;h2 id="非main-goroutine退出">
 非main goroutine退出
 &lt;a class="anchor" href="#%e9%9d%9emain-goroutine%e9%80%80%e5%87%ba">#&lt;/a>
&lt;/h2>
&lt;p>我们首先来gdb调试一下这个程序&lt;/p></description></item></channel></rss>