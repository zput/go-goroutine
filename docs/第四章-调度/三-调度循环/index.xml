<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go调度源码分析</title><link>https://zput.github.io/go-goroutine/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%B0%83%E5%BA%A6/%E4%B8%89-%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF/</link><description>Recent content on go调度源码分析</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 Mar 2020 14:14:00 +0000</lastBuildDate><atom:link href="https://zput.github.io/go-goroutine/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%B0%83%E5%BA%A6/%E4%B8%89-%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>4.3.1 调度循环</title><link>https://zput.github.io/go-goroutine/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%B0%83%E5%BA%A6/%E4%B8%89-%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF/4.3.1-%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF/</link><pubDate>Sat, 21 Mar 2020 14:14:00 +0000</pubDate><guid>https://zput.github.io/go-goroutine/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%B0%83%E5%BA%A6/%E4%B8%89-%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF/4.3.1-%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF/</guid><description>当go程序初始化到运行package main里面的main函数,g0已经被初始化,g.sched和stack被赋值,当下次切换Goroutine的时候,或者说再次调度的时候, 必然要重新使用g0,那么会重新使用g.sched.PC,g.sched.SP? g0栈是否重新使用初始时候mstart1函数的栈 # main.go
package main import &amp;#34;fmt&amp;#34; // the function&amp;#39;s body is empty func add(x, y int64) int64 func main() { gg:=add(2, 3) fmt.Println(gg) } add_amd.s
TEXT ·add(SB),$0-24 MOVQ x+0(FP), BX MOVQ y+8(FP), BP ADDQ BP, BX MOVQ BX, ret+16(FP) RET 编译一下源代码: go build -gcflags &amp;quot;-N -l&amp;quot; -o test ..
[root@gitlab kubernets]# gdb test GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-119.el7 Copyright (C) 2013 Free Software Foundation, Inc.</description></item></channel></rss>